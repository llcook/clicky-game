{"version":3,"sources":["components/NavBar/index.js","components/Wrapper/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","to","score","topScore","Wrapper","children","ImageCard","alt","name","src","image","onClick","handleClick","id","App","state","cards","shuffleCards","sort","b","Math","random","resetCards","map","card","Object","objectSpread","isClicked","_this","firstClick","newData","newScore","newTopScore","max","setState","repeatClick","correctGuess","this","_this2","Fragment","components_NavBar","components_Wrapper","components_ImageCard","key","clicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAceA,SAXA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAuBC,GAAG,KAA1C,eACAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMM,OAClBL,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMO,UACtBN,EAAAC,EAAAC,cAAA,yCCFGK,SAJC,SAAAR,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBJ,EAAMS,YCQ7BC,SATG,SAAAV,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,OACIQ,IAAKX,EAAMY,KACXC,IAAKb,EAAMc,MACXC,QAAS,kBAAMf,EAAMgB,YAAYhB,EAAMiB,iBCmFpCC,6MAnFbC,MAAQ,CACNC,QACAd,MAAO,EACPC,SAAU,KAWZc,aAAe,SAAAD,GAEb,OADoBA,EAAME,KAAK,SAASpB,EAAGqB,GAAG,MAAO,GAAMC,KAAKC,cAIlEC,WAAa,SAAAN,GACX,IAAMM,EAAaN,EAAMO,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAgBG,WAAW,MAC5D,OAAOC,EAAKX,aAAaK,MAG3BO,WAAa,SAAAC,GACX,IAAIC,EAAWH,EAAKb,MAAMb,MAC1B6B,IACA,IAAIC,EAAcZ,KAAKa,IAAIF,EAAUH,EAAKb,MAAMZ,UAEhDyB,EAAKM,SAAS,CACZlB,MAAOY,EAAKX,aAAaa,GACzB5B,MAAO6B,EACP5B,SAAU6B,OAIdG,YAAc,SAAAL,GACZF,EAAKM,SAAS,CACVlB,MAAOY,EAAKN,WAAWQ,GACvB5B,MAAO,OAMbU,YAAc,SAAAC,GACZ,IAAIuB,GAAe,EACbN,EAAUF,EAAKb,MAAMC,MAAMO,IAAI,SAAAC,GAOnC,OANIA,EAAKX,KAAOA,IACTW,EAAKG,YACRH,EAAKG,WAAY,EACjBS,GAAe,IAGZZ,IAGTY,EAAeR,EAAKC,WAAWC,GAAWF,EAAKO,YAAYL,uFAhD3DO,KAAKH,SAAS,CAAElB,MAAOqB,KAAKpB,aAAaoB,KAAKtB,MAAMC,0CAsD7C,IAAAsB,EAAAD,KACP,OACMxC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,CAAQtC,MAAOmC,KAAKtB,MAAMb,MAAOC,SAAUkC,KAAKtB,MAAMZ,WACtDN,EAAAC,EAAAC,cAAC0C,EAAD,KACGJ,KAAKtB,MAAMC,MAAMO,IAAI,SAAAC,GAAI,OACxB3B,EAAAC,EAAAC,cAAC2C,EAAD,CACEhC,MAAOc,EAAKd,MACZiC,IAAKnB,EAAKX,GACVA,GAAIW,EAAKX,GACT+B,QAASpB,EAAKG,UACdf,YAAa0B,EAAK1B,yBA5ElBiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30929b88.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nconst NavBar = props => (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <span className=\"navbar-brand mb-0 h1\" to=\"/\">Clicky Game</span>\n        <ul className=\"navbar-nav\">\n            <li>Score: {props.score}</li>\n            <li>Top Score: {props.topScore}</li>\n            <li>Click a color only once</li>\n        </ul>\n    </nav>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./style.css\"\n\nconst Wrapper = props => (\n    <div className=\"container-fluid\">{props.children}</div>\n);\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst ImageCard = props => (\n    <div className=\"img-fluid d-inline-block img-container\">\n        <img\n            alt={props.name}\n            src={props.image}\n            onClick={() => props.handleClick(props.id)} />\n    </div>\n);\n\nexport default ImageCard;","import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar/index\";\nimport Wrapper from \"./components/Wrapper/index\";\nimport ImageCard from './components/ImageCard/index';\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    score: 0,\n    topScore: 0\n  }\n\n  // FUNCTIONS CALLED ON PAGE LOAD\n  \n  componentDidMount() {\n    this.setState({ cards: this.shuffleCards(this.state.cards) });\n  }\n\n  // FUNCTIONS\n\n  shuffleCards = cards => {\n    let shuffledCards = cards.sort(function(a, b){return 0.5 - Math.random()});\n    return shuffledCards;\n  };\n\n  resetCards = cards => {\n    const resetCards = cards.map(card => ({ ...card, isClicked: false}));\n    return this.shuffleCards(resetCards);\n  }\n\n  firstClick = newData => {\n    let newScore = this.state.score;\n    newScore++;\n    let newTopScore = Math.max(newScore, this.state.topScore);\n\n    this.setState({\n      cards: this.shuffleCards(newData),\n      score: newScore,\n      topScore: newTopScore,\n    })\n  }\n\n  repeatClick = newData => {\n    this.setState({\n        cards: this.resetCards(newData),\n        score: 0\n    });\n  }\n\n  // CLICK FUNCTION\n\n  handleClick = id => {\n    let correctGuess = false;\n    const newData = this.state.cards.map(card => {\n      if (card.id === id) {\n        if (!card.isClicked) {\n          card.isClicked = true;\n          correctGuess = true;\n        }\n      }\n      return card;\n    });\n\n    correctGuess ? this.firstClick(newData) : this.repeatClick(newData);\n\n  };\n\n  // OUTPUT\n\n  render() {\n    return (\n          <>\n            <NavBar score={this.state.score} topScore={this.state.topScore}/>\n            <Wrapper>\n              {this.state.cards.map(card => (\n                <ImageCard\n                  image={card.image}\n                  key={card.id}\n                  id={card.id}\n                  clicked={card.isClicked}\n                  handleClick={this.handleClick}\n                />\n              ))}\n            </Wrapper>\n          </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}